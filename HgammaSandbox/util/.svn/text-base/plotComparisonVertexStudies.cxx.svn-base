#include <iostream>
#include <TString.h>
#include <TFile.h>
#include <TCanvas.h>
#include <TLatex.h>
#include <TH1F.h>
#include <TH2F.h>
#include <TGraphAsymmErrors.h>

using namespace std; 

////////////////////////// Small and very helpful functions //////////////////////////

void fatal(TString msg) { printf("\nFATAL\n  %s\n\n",msg.Data()); abort(); }


TFile *openFile(TString fn) 
{
  TFile *f = TFile::Open(fn);
  if (f==nullptr) fatal("Cannot open "+fn);
  return f;
}


TH1 *getHisto(TFile *f, TString hn) 
{
  TH1 *h = (TH1*)f->Get(hn);
  if (h==nullptr) fatal("Cannot access histo "+hn+" in file "+f->GetName());
  return h;
}

TH2 *getHisto2D(TFile *f, TString hn)
{
  TH2 *h = (TH2*)f->Get(hn);
  if (h==nullptr) fatal("Cannot access histo "+hn+" in file "+f->GetName());
  return h;
}

TH1 *drawHisto(TH1 *h, TString opt, int col=kBlue, int lw=2) 
{
  h->SetLineColor(col); h->SetLineWidth(lw); h->SetStats(0);
  h->Draw(opt); return h;
}

TH1 *drawEffHisto(TH1 *h, TString opt, int col=kBlue, int lw=2) 
{
  h->SetLineColor(col); h->SetLineWidth(lw); h->SetStats(0);
  h->GetYaxis()->SetRangeUser(0,1.2); h->GetYaxis()->SetTitle("Efficiency / Bin");
  h->Draw(opt); return h;
}

TH1 *drawHistoNorm(TH1 *h, TString opt, int col=kBlue, int lw=2) 
{
  h->SetLineColor(col); h->SetLineWidth(lw); h->SetStats(0);
  h->GetYaxis()->SetTitle("Fraction of Events / Bin");
  int nbins = h->GetNbinsX();
  h->SetBinContent( 1, h->GetBinContent(0)+h->GetBinContent(1));
  h->SetBinContent( nbins, h->GetBinContent(nbins) + h->GetBinContent(nbins+1) );
  h->Scale( 1. / h->Integral( -(nbins+1), (nbins+1) ) );
  h->SetMaximum( 1.3 * h->GetMaximum() );
  h->Draw(opt); return h;
}

TH2 *drawHisto2D(TH2 *h, TString opt)
{ 
  h->SetStats(0);
  h->Draw(opt); return h;
}

TH1 *drawEffHisto(TFile *f, TString hn, TString opt, int col=kBlue, int lw=2) 
{
  return drawEffHisto(getHisto(f,hn),opt,col);
}


TH1 *drawHisto(TFile *f, TString hn, TString opt, int col=kBlue, int lw=2) 
{
  return drawHisto(getHisto(f,hn),opt,col);
}

TH1 *drawHistoNorm(TFile *f, TString hn, TString opt, int col=kBlue, int lw=2) 
{
  return drawHistoNorm(getHisto(f,hn),opt,col);
}

void drawCompNorm(TFile *f, TFile *f2, TString hn, TString opt)
{
  TH1 *h1 =  getHisto(f,hn);
  TH1 *h2 = getHisto(f2,hn);
  
  double max = h1->GetMaximum();
  if (h2->GetMaximum() > max) max = h2->GetMaximum();
  h1->GetYaxis()->SetRangeUser(0.0, max*1.2);

  drawHistoNorm( h2,         opt, kBlue);
  drawHistoNorm( h1, opt+" same",  kRed);
}

TH2 *drawHisto2D(TFile *f, TString hn, TString opt)
{
  return drawHisto2D(getHisto2D(f,hn),opt);
}

void drawText(double x, double y, TString txt, int col=kBlack) 
{
  static TLatex *tex = new TLatex(); tex->SetNDC();
  tex->SetTextFont(42); tex->SetTextSize(0.036); tex->SetTextColor(col);
  tex->DrawLatex(x,y,txt);
}

void drawTextSmall(double x, double y, TString txt, int col=kBlack) 
{
  static TLatex *tex = new TLatex(); tex->SetNDC();
  tex->SetTextFont(42); tex->SetTextSize(0.028); tex->SetTextColor(col);
  tex->DrawLatex(x,y,txt);
}

void drawCompLabels(double ymod = 0.0) {
  drawText(0.82,0.85+ymod,"MC ggF",kRed);
  drawText(0.82,0.80+ymod,"MC ttH",kBlue);
}

void drawMajorLabels(int col=kBlack) {
  drawText(0.15,0.90,"2 true higgs photons",col);
  drawText(0.68,0.90,"#bf{#it{ATLAS}} Work In Progress",col);
}

void drawCutLabels( TString jcut, TString cutVal, int col=kRed ) {
  TString jtag = "";
  if (jcut.Contains("_0jex")) jtag = "== 0 true jets";
  if (jcut.Contains("_1jex")) jtag = "== 1 true jets";
  if (jcut.Contains("_2jex")) jtag = "== 2 true jets";
  if (jcut.Contains("_1jin")) jtag = "#geq 1 true jets";
  if (jcut.Contains("_2jin")) jtag = "#geq 2 true jets";
  if (jcut.Contains("_3jin")) jtag = "#geq 3 true jets";
  
  //double xmod = -0.53;
  double xmod = 0.05;
  //if (jtag != "") xmod = -0.1;
  drawText(0.15, 0.85, jtag,col);
  
  if       (cutVal.Contains("_2mm")) drawText(0.68+xmod,0.85,"|z_{PV}^{truth} - z_{PV0}^{reco}| < 2 mm",col); 
  else if  (cutVal.Contains("_5mm")) drawText(0.68+xmod,0.85,"|z_{PV}^{truth} - z_{PV0}^{reco}| < 5 mm",col);  
  else if (cutVal.Contains("_10mm")) drawText(0.68+xmod,0.85,"|z_{PV}^{truth} - z_{PV0}^{reco}| < 10 mm",col);  
  else if (cutVal.Contains("_20mm")) drawText(0.68+xmod,0.85,"|z_{PV}^{truth} - z_{PV0}^{reco}| < 20 mm",col); 
}


void drawMuBinLabels( TString jcut, TString ibin, int col=kRed) {
  TString jtag = "";
  if (jcut.Contains("_0jex")) jtag = "== 0 true jets";
  if (jcut.Contains("_1jex")) jtag = "== 1 true jets";
  if (jcut.Contains("_2jex")) jtag = "== 2 true jets";
  if (jcut.Contains("_1jin")) jtag = "#geq 1 true jets";
  if (jcut.Contains("_2jin")) jtag = "#geq 2 true jets";
  if (jcut.Contains("_3jin")) jtag = "#geq 3 true jets";

  double ymod = 0.0;
  if (jtag != "") {
    ymod = -0.05;
    drawText(0.78, 0.85, jtag,col);
  }
  
  if (ibin.Contains("_0bin")) drawText(0.78, 0.85+ymod, "#LT#mu#GT < 4.5", col);
  if (ibin.Contains("_1bin")) drawText(0.78, 0.85+ymod,  "4.5 #leq #LT#mu#GT <  9.5", col);
  if (ibin.Contains("_2bin")) drawText(0.78, 0.85+ymod,  "9.5 #leq #LT#mu#GT < 14.5", col);
  if (ibin.Contains("_3bin")) drawText(0.78, 0.85+ymod, "14.5 #leq #LT#mu#GT < 19.5", col);
  if (ibin.Contains("_4bin")) drawText(0.78, 0.85+ymod, "19.5 #leq #LT#mu#GT < 24.5", col);
  if (ibin.Contains("_5bin")) drawText(0.78, 0.85+ymod, "24.5 #leq #LT#mu#GT < 29.5", col);
  if (ibin.Contains("_6bin")) drawText(0.78, 0.85+ymod, "29.5 #leq #LT#mu#GT < 34.5", col);
  if (ibin.Contains("_7bin")) drawText(0.78, 0.85+ymod, "34.5 #leq #LT#mu#GT < 39.5", col);
}

double integrate(TFile *f, TString hn )
{ 
  TH1 *h =  getHisto(f,hn); 
  double sum = h->Integral(); 
  return sum; 
} 


///////////////////////// The main plotting function ////////////////////////////////
int main(int argc, char **argv) 
{
  // input file name
  //TString inFN("Run/runRecoEff_2015.2.23_12.18.57/hist-sample.root"), pdf("plots.pdf");
  TString inFN, inFN2, pdf; 
  for (int i=1;i<argc;++i) 
  {
    TString arg(argv[i]);
    if (arg=="--inputFile") inFN=argv[++i];
    if (arg=="--inputFile2") inFN=argv[++i];
    if (arg=="--pdfFile") pdf=argv[++i];
    if (arg=="-in") inFN=argv[++i];
    if (arg=="-in2") inFN2=argv[++i];
    if (arg=="-pdf") pdf=argv[++i];
  }

  printf("\n  Running plotRecoEff\n");
  printf("  input file: %s\n",inFN.Data());

  TFile  *f =  openFile(inFN);
  TFile *f2 = openFile(inFN2);

  // Create output pdf
  // Set style
  TCanvas *can = new TCanvas();
  can->SetTopMargin(0.04); can->SetRightMargin(0.04);
  can->Print(pdf+"[");

  // ----------------------------------
  // Plot single variable histograms
  // ----------------------------------
  for( TString hists: {"h_nTruePhotons","h_nPrimaryVtxs","h_averageIPC",
                      "h_true_vtx_z", "h_reco_vtx_z", "h_diff_vtx_z"} ) {
    
          //TH1  *h =      drawHistoNorm(f, hists ,"",  Red);
          //TH1 *h2 = drawHistoNorm(f2, hists ,"same",kBlue);
          drawCompNorm( f, f2, hists, "");
          drawMajorLabels(kBlack); drawCompLabels();
          //drawTextSmall(0.15,0.85,"Mean: "+to_string(h->GetMean()),kRed);
          //drawTextSmall(0.15,0.80,"RMS: "+to_string(h->GetRMS()),kRed);
          can->Print(pdf);
  }

  // ----------------------------------
  // Plot NPV in bins of < mu >
  // ----------------------------------
  for( TString hists: {"h_nPrimaryVtxs"} ) {
    for( TString jcut: {"", "_0jex", "_1jex","_2jex", "_1jin", "_2jin", "_3jin"} ) {
      for( TString ibin: {"_0bin","_1bin","_2bin","_3bin","_4bin","_5bin","_6bin","_7bin"} ) {
        //TH1 *h = drawHistoNorm(f, hists ,"",kBlue);
        drawCompNorm( f, f2, hists+ibin+jcut, "");
        drawMajorLabels(kBlack); drawMuBinLabels(jcut,ibin,kBlack);
        //drawTextSmall(0.15,0.85,"Mean: "+to_string(h->GetMean()),kRed);
        //drawTextSmall(0.15,0.80,"RMS: "+to_string(h->GetRMS()),kRed);
        drawCompLabels(-0.1);
        can->Print(pdf);
      }
    }
  }

  
  // ----------------------------------
  // Plot Efficiencies 
  // ----------------------------------
  can->SetGridy(1);
  can->SetGridx(1);
  
  for( TString cutval: {"_20mm", "_10mm", "_5mm", "_2mm"} ) {
    for( TString hvar: {"_nPV","_mu"} ) {
      for( TString jcut: {"", "_0jex", "_1jex","_2jex", "_1jin", "_2jin", "_3jin"} ) {
        drawEffHisto( f, "h_eff"+hvar+cutval+jcut, "",  kRed);
        drawEffHisto(f2, "h_eff"+hvar+cutval+jcut, "same", kBlue);
        drawMajorLabels(kBlack); drawCutLabels(jcut, cutval, kBlack);
        drawCompLabels(-0.6);
        can->Print(pdf);
      }
    }
  }

  can->SetGridy(0);
  can->SetGridx(0);
  //end grids for eff plots

  can->Print(pdf+"]");
  printf("  Produced: %s\n\n",pdf.Data());
  f->Close();


}


