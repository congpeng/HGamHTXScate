#include <iostream>
#include <TString.h>
#include <TFile.h>
#include <TCanvas.h>
#include <TLatex.h>
#include <TH1F.h>
#include <TGraphAsymmErrors.h>
#include "TF1.h"
#include "TF2.h"

void fatal(TString msg) { printf("\nFATAL\n  %s\n\n",msg.Data()); abort(); }

TFile *openFile(TString fn) {
  TFile *f = TFile::Open(fn);
  if (f==nullptr) fatal("Cannot open "+fn);
  return f;
}

TH1 *getHisto(TFile *f, TString hn) {
  TH1 *h = (TH1*)f->Get(hn);
  if (h==nullptr) fatal("Cannot access histo "+hn+" in file "+f->GetName());
  return h;
}

TH1 *drawHisto(TH1 *h, TString opt, int col=kBlue, int lw=2) {
  h->SetLineColor(col); h->SetLineWidth(lw); h->SetStats(0);
  h->Draw(opt); return h;
}

TH1 *drawHisto(TFile *f, TString hn, TString opt, int col=kBlue, int lw=2) {
  return drawHisto(getHisto(f,hn),opt,col,lw);
}

void drawText(double x, double y, TString txt, int col=kBlack) {
  static TLatex *tex = new TLatex(); tex->SetNDC();
  tex->SetTextFont(42); tex->SetTextSize(0.036); tex->SetTextColor(col);
  tex->DrawLatex(x,y,txt);
}

void drawBayesianEff(TH1 *pass, TH1 *total, int col, int ms=21) {
  TGraphAsymmErrors *g = new TGraphAsymmErrors(pass,total);
  g->SetLineColor(col); g->SetMarkerColor(col); g->SetMarkerStyle(ms); g->SetMarkerSize(0.8);
  g->Draw("P same");
}

void drawEffVsPtLabels(TString etaReg) {
	if (etaReg=="") drawText(0.2,0.90,"No photon #eta requirment");
  else if (etaReg.Contains("ctrl")) drawText(0.2,0.90,"Photon |#eta|<1.37 (truth #eta)");
  else if (etaReg.Contains("fwd"))  drawText(0.2,0.90,"Photon 1.52<|#eta|<2.37 (truth #eta)");
  drawText(0.7,0.50,"Photon clusters",kBlue);
  drawText(0.7,0.45,"Loose ID photons",kGreen+1);
  drawText(0.7,0.40,"Tight ID photons",kRed);
}

int main(int argc, char **argv) {
  // input file name
  TString inFN("output/hist-sample.root"), pdf("Truth.pdf");
  for (int i=1;i<argc;++i) {
    TString arg(argv[i]);
    if (arg=="--inputFile") inFN=argv[++i];
    if (arg=="--pdfFile") pdf=argv[++i];
  }
    
  printf("\n  Running plotTruth\n");
  printf("  input file: %s\n",inFN.Data());
  TFile *f = openFile(inFN);

  // Create output pdf
  // Set style
  TCanvas *can = new TCanvas();
  can->SetTopMargin(0.04); can->SetRightMargin(0.04);
  can->Print(pdf+"[");
  // Page 1. Draw the multiplicity of reconstructed photons
  TH1 *h = drawHisto(f,"NHiggsPhotons","",kBlue);
  h->SetXTitle("NHiggsPhotons");
  h->Draw();
  drawText(0.7,0.90,"NHiggsPhotons",kBlue);  
  can->Print(pdf);
	
  /*page 2*/	
  TH1 *h1 = drawHisto(f,"invMass_photonFromHiggs","",kBlue);
  h1->SetXTitle("invMass_photonFromHiggs[GeV]");
  h1->Draw();
  drawText(0.7,0.90,"Mass dist.",kBlue);  
  can->Print(pdf);
	
  /*page 3*/	
  TH1 *h2 = drawHisto(f,"invMass_photonFromHiggs_1","",kBlue);
  h2->SetXTitle("invMass_photonFromHiggs[GeV]");
  h2->Draw();
  drawText(0.7,0.90,"Mass dist.",kBlue);  
  can->Print(pdf);
	
  /*page 4*/	
  TH1 *h3 = drawHisto(f,"invMass_photonFromHiggs_2","",kBlue);
  h3->SetXTitle("invMass_photonFromHiggs[GeV]");
  h3->Draw();
  drawText(0.7,0.90,"Mass dist.",kBlue);  
  can->Print(pdf);
	
  /*page 5*/	
  TH1 *h4 = drawHisto(f,"invMass_photonFromHiggs_3","",kBlue);
  h4->SetXTitle("invMass_photonFromHiggs[GeV]");
  h4->Draw();
  drawText(0.7,0.90,"Mass dist.",kBlue);  
  can->Print(pdf);

  /*page 6*/
  TH1 *h4a = drawHisto(f,"invMass_photonFromHiggs_3","",kBlue);
  h4a->Draw("hist c");
  h4a->SetXTitle("invMass_photonFromHiggs[GeV]");
  drawText(0.7,0.90,"Mass dist.(hist c)",kBlue);
  can->Print(pdf);
  /*page 7*/
  TH1 *h4b = drawHisto(f,"invMass_photonFromHiggs_3","",kBlue);
  h4b->Draw("hist l");
  h4b->SetXTitle("invMass_photonFromHiggs[GeV]");
  drawText(0.7,0.90,"Mass dist.(hist c)",kBlue);
  can->Print(pdf);
  /*page 8*/
  TF1 *fbw = new TF1("BW", "[2]/((x^2-[0]^2)^2 +([0]*[1])^2)",124.99,125.01);
  fbw->SetParameters(125,0.00412,1.0);
	//fbw->Draw();
	
  TH1 *myy_from_Higgs = drawHisto(f,"invMass_photonFromHiggs_3","",kBlue);
  myy_from_Higgs->Fit("BW");
  myy_from_Higgs->Draw();
  can->Print(pdf);
  
  /* another page*/
  myy_from_Higgs->Draw();
  myy_from_Higgs->Draw("hist l same");
  fbw->Draw("same");
  can->Print(pdf); 
  
  /*page 9*/
  // fit function
  TH1 *h7 = (TH1*)f->Get("invMass_photonFromHiggs_3");
  h7->SetStats(0);
  h7->SetLineColor(kBlue);
  h7->Fit("BW");
        
  // h7->Draw();    
  drawText(0.7,0.90,"Mass dist.",kBlue);
  drawText(0.7,0.85,"Breit-Wigner Dist,",kRed);
  can->Print(pdf);

 
  /*page 11*/	
  TH1 *h6 = drawHisto(f,"invMass_photons_1","",kBlue);
  h6->SetXTitle("invMass_photons[GeV]");
  h6->Draw();
  drawText(0.7,0.90,"Mass dist.",kBlue);  
  can->Print(pdf);

  /*page 12*/	
  TH1 *h11 = drawHisto(f,"invMass_Recophotons_1","",kGreen+1);
  h11->SetXTitle("invMass_Recophotons [GeV]");
  h11->Draw();
  drawText(0.7,0.90,"Recophotons Mass dist.",kGreen+1);  
  can->Print(pdf);
	
  /*page 13*/	
  TH1 *h8 = drawHisto(f,"invMass_tightPhotons_1","",kPink+4);
  h8->SetXTitle("invMass_tightPhotons [GeV]");
  h8->Draw();
  drawText(0.7,0.90,"tightPhotons Mass dist.",kPink+4);  
  can->Print(pdf);
	
  /*page 14*/	
  TH1 *h9 = drawHisto(f,"invMass_loosePhotons_1","",kBlue);
  h9->SetXTitle("invMass_loosePhotons [GeV]");
  h9->Draw();
  drawText(0.7,0.90,"loosePhotons Mass dist.",kBlue);  
  can->Print(pdf);
	
  /*page 16*/	
  TH1 *h9a = drawHisto(f,"invMass_truePhotons","",kRed);
  h9a->SetXTitle("invMass_truePhotons [GeV]");
  h9a->Draw();
  drawText(0.7,0.90,"truePhotons Mass dist.",kRed);  
  can->Print(pdf);
	
  /*page 17*/	
  TH1 *h10 = drawHisto(f,"invMass_loosePhotons_1","",kBlue);
  h10->SetXTitle("invMass_Dist [GeV]");
  h10->Draw(); h10->Draw("hist l same");
  // add tight and recon photon 
  h8 = drawHisto(f,"invMass_tightPhotons_1","same",kPink+4);
  h11 = drawHisto(f,"invMass_Recophotons_1","same",kGreen+1);
	
  drawText(0.6,0.90,"loosePhotons Mass dist.",kBlue);  
  drawText(0.6,0.85,"tightPhotons Mass dist.",kPink+4); 
  drawText(0.6,0.80,"Recophotons Mass dist.",kGreen+1); 
  can->Print(pdf);
	
	
  /*page 18*/	
  TH1 *h11a =drawHisto(f,"invMass_loosePhotons_1","",kBlue);

  h11a->SetXTitle("invMass_Dist [GeV]");	
  h11a->Draw(); h10->Draw("hist l same");
  // add true, loose and tight photons
  h9a = drawHisto(f,"invMass_truePhotons","same",kRed);
  h11 = drawHisto(f,"invMass_Recophotons_1","same",kGreen+1);
  h8 = drawHisto(f,"invMass_tightPhotons_1","same",kPink+4);
	
  drawText(0.6,0.90,"RecoPhoton Mass dist.",kGreen+1);  
  drawText(0.6,0.85,"truePhotons Mass dist.",kRed);  
  drawText(0.6,0.80,"loosePhotons Mass dist.",kBlue);  
  drawText(0.6,0.75,"tightPhotons Mass dist.",kPink+4); 
	
	
	
  can->Print(pdf);	
	  
  can->Print(pdf+"]");
  printf("  Produced: %s\n\n",pdf.Data());
	
  /* new Canvas*/
  TCanvas *c1 = new TCanvas("c1","try",700,500);
  c1->cd();
  h4->SetLineColor(kBlue);
  h4->Draw("hist l");
  fbw->Draw("same");
  drawText(0.7,0.85,"Mass dist.",kBlue);
  drawText(0.7,0.70,"Breit-Wigner Dist,",kRed);
  c1->SaveAs("Taa.pdf");
  f->Close();
  
}

