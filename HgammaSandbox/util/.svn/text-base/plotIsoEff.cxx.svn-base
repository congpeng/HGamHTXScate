#include <iostream>
#include <TString.h>
#include <TFile.h>
#include <TCanvas.h>
#include <TLatex.h>
#include <TH1F.h>
#include <TH2F.h>
#include <TGraphAsymmErrors.h>

using namespace std; 

////////////////////////// Small and very helpful functions //////////////////////////

void fatal(TString msg) { printf("\nFATAL\n  %s\n\n",msg.Data()); abort(); }


TFile *openFile(TString fn) 
{
  TFile *f = TFile::Open(fn);
  if (f==nullptr) fatal("Cannot open "+fn);
  return f;
}


TH1 *getHisto(TFile *f, TString hn) 
{
  TH1 *h = (TH1*)f->Get(hn);
  if (h==nullptr) fatal("Cannot access histo "+hn+" in file "+f->GetName());
  return h;
}

TH1 *drawHisto(TH1 *h, TString opt, int col=kBlue, int lw=2) 
{
  h->SetLineColor(col); h->SetLineWidth(lw); h->SetStats(0);
  h->Draw(opt); return h;
}

TH1 *drawEffHisto(TH1 *h, TString opt, int col=kBlue, int lw=2) 
{
  h->SetLineColor(col); h->SetLineWidth(lw); h->SetStats(0);
  h->GetYaxis()->SetRangeUser(0.75, 1.0); h->GetYaxis()->SetTitle("Isolation Efficiency / Bin");
  h->Draw(opt); return h;
}

TH1 *drawEffHisto(TFile *f, TString hn, TString opt, int col=kBlue, int lw=2) 
{
  return drawEffHisto(getHisto(f,hn),opt,col);
}


TH1 *drawHisto(TFile *f, TString hn, TString opt, int col=kBlue, int lw=2) 
{
  return drawHisto(getHisto(f,hn),opt,col);
}

void drawText(double x, double y, TString txt, int col=kBlack) 
{
  static TLatex *tex = new TLatex(); tex->SetNDC();
  tex->SetTextFont(42); tex->SetTextSize(0.036); tex->SetTextColor(col);
  tex->DrawLatex(x,y,txt);
}

void drawTextSmall(double x, double y, TString txt, int col=kBlack) 
{
  static TLatex *tex = new TLatex(); tex->SetNDC();
  tex->SetTextFont(42); tex->SetTextSize(0.028); tex->SetTextColor(col);
  tex->DrawLatex(x,y,txt);
}

void drawLabels(int col=kBlack) {
  drawText(0.68,0.92,"#bf{#it{ATLAS}} Work In Progress",col);
  drawTextSmall(0.15,0.92,"ggF MC15, p_{T#gamma} > 25 GeV, Tight ID",col);

  drawText(0.15,0.30,"Cone20", kGreen+1);
  drawText(0.15,0.25,"Cone20 Loose", kBlue);
  drawText(0.15,0.20,"Cone20 Looser", kRed);
}


///////////////////////// The main plotting function ////////////////////////////////
int main(int argc, char **argv) 
{
  // input file name
  //TString inFN("Run/runRecoEff_2015.2.23_12.18.57/hist-sample.root"), pdf("plots.pdf");
  TString inFN, pdf; 
  for (int i=1;i<argc;++i) 
  {
    TString arg(argv[i]);
    if (arg=="--inputFile") inFN=argv[++i];
    if (arg=="--pdfFile") pdf=argv[++i];
    if (arg=="-in") inFN=argv[++i];
    if (arg=="-pdf") pdf=argv[++i];
  }

  printf("\n  Running plotRecoEff\n");
  printf("  input file: %s\n",inFN.Data());
  TFile *f = openFile(inFN);

  // Create output pdf
  // Set style
  TCanvas *can = new TCanvas();
  can->SetTopMargin(0.04); can->SetRightMargin(0.04);
  can->Print(pdf+"[");

  // ----------------------------------
  // Draw Efficiency Profiles
  // ----------------------------------
  TString wps[3] = {"_Cone20", "_Cone20L", "_Cone20L++"};
  int  colors[3] = { kGreen+1,      kBlue,        kRed };

  for( TString hname: {"h_var", "h_pt", "h_eta", "h_mu", "h_npv"} ) {
    for( int iwp(0); iwp < 3; iwp++ ) {
      TString opt = "PE SAME";
      if (iwp == 0) opt = "PE";
      drawEffHisto(f, hname+wps[iwp], opt, colors[iwp]);
    }
    drawLabels();
    can->Print(pdf);
  }
  can->Print(pdf+"]");
  printf("  Produced: %s\n\n",pdf.Data());
  f->Close();


}


