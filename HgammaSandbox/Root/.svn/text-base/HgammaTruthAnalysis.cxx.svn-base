/*
  This is where all of the standard members of the HgammaTruthAnalysis class are defined. In order to have slightly smaller
  files, member functions added by me are defined in the TruthAnalysisMethods.cxx file. I don't like having different
  names for the header and .cxx files either, but I decided it was the lesser of two evils.
*/

#include <EventLoop/Job.h>
#include <EventLoop/StatusCode.h>
#include <EventLoop/Worker.h>
#include "EventLoop/OutputStream.h"
#include <HgammaSandbox/HgammaTruthAnalysis.h>

// EDM includes:
#include "xAODEventInfo/EventInfo.h"

// Photons
#include "xAODEgamma/PhotonContainer.h"
#include "xAODEgamma/PhotonAuxContainer.h"

// Truth
#include "xAODTruth/TruthParticleContainer.h"
#include "xAODTruth/TruthParticleAuxContainer.h"

//Other
#include <TSystem.h>
#include "xAODRootAccess/TStore.h"
#include "xAODCore/ShallowCopy.h"

// this is needed to distribute the algorithm to the workers
ClassImp(HgammaTruthAnalysis)



HgammaTruthAnalysis :: HgammaTruthAnalysis ()
{
  // Here you put any code for the base initialization of variables,
  // e.g. initialize all pointers to 0.  Note that you should only put
  // the most basic initialization here, since this method will be
  // called on both the submission and the worker node.  Most of your
  // initialization code will go into histInitialize() and
  // initialize().
}



EL::StatusCode HgammaTruthAnalysis :: setupJob (EL::Job& job)
{
  // Here you put code that sets up the job on the submission object
  // so that it is ready to work with your algorithm, e.g. you can
  // request the D3PDReader service or add output files.  Any code you
  // put here could instead also go into the submission script.  The
  // sole advantage of putting it here is that it gets automatically
  // activated/deactivated when you add/remove the algorithm from your
  // job, which may or may not be of value to you.
  job.useXAOD ();

  // let's initialize the algorithm to use the xAODRootAccess package
  xAOD::Init( "HgammaTruthAnalysis" ).ignore(); // call before opening first file

  // tell EventLoop about our output xAOD:
//  EL::OutputStream out ("STExAOD");
//  job.outputAdd (out);

  return EL::StatusCode::SUCCESS;
}



EL::StatusCode HgammaTruthAnalysis :: histInitialize ()
{
  // Here you do everything that needs to be done at the very
  // beginning on each worker node, e.g. create histograms and output
  // trees.  This method gets called before any input files are
  // connected.

  // Fill histogram bools and values from file
  read_input_file();
  read_input_values();

  // Add histograms to m_myHistograms
  if( h_plotTruthPhotons )
  {
      MakeKinematicHistograms("Good Truth Photons");
  }

  if( h_plotTruthElectrons )
  {
      MakeKinematicHistograms("Good Truth Electrons");
  }

  if( h_plotTruthMuons )
  {
      MakeKinematicHistograms("Good Truth Muons");
  }

  if( h_plotTruthJets )
  {
      MakeKinematicHistograms("Good Truth Jets");
  }

  if( h_plotTruthDiphotonSystem )
  {
      MakeKinematicHistograms("Diphoton System (all phase space)");
      MakeKinematicHistograms("Diphoton System (fiducial volume)");
      MakeDiphotonHistograms("Diphoton System (all phase space)");
      MakeDiphotonHistograms("Diphoton System (fiducial volume)");

  }

  if ( h_plotTruthPdgIds )
  {
      MakePdgIdHistograms();
  }

  MakeDressingHistograms();

  if( h_plotTruthMET )
  {
      m_myHistograms["Truth MET"] = new TH1F("h_truth_MET", "Truth MET", 41, -0.0125, 1.0125);
  }

  if(h_CoM_energy)
  {
      MakeCoMEnergyHistograms();
  }

  if(m_studyTruthIso)
  {
      m_myHistograms["OutOfBoxIso"] = new TH1F("h_truth_OutOfBoxIso", "Truth OutOfBoxIso", 201, 0, 2000);
      m_myHistograms["NoMuNoNuIso"] = new TH1F("h_truth_NoMuNoNuIso", "Truth NoMuNoNuIso", 201, 0, 2000);
  }

  // Register histograms on m_myHistograms
  for(std::map<std::string,TH1*>::iterator itr = m_myHistograms.begin(); itr != m_myHistograms.end(); ++itr){
      wk()->addOutput (itr->second);
  }

  return EL::StatusCode::SUCCESS;
}



EL::StatusCode HgammaTruthAnalysis :: fileExecute ()
{
  // Here you do everything that needs to be done exactly once for every
  // single file, e.g. collect a list of all lumi-blocks processed
  return EL::StatusCode::SUCCESS;
}



EL::StatusCode HgammaTruthAnalysis :: changeInput (bool /*firstFile*/ )
{
  // Here you do everything you need to do when we change input files,
  // e.g. resetting branch addresses on trees.  If you are using
  // D3PDReader or a similar service this method is not needed.
  return EL::StatusCode::SUCCESS;
}



EL::StatusCode HgammaTruthAnalysis :: initialize ()
{
  // Here you do everything that you need to do after the first input
  // file has been connected and before the first event is processed,
  // e.g. create additional histograms based on which variables are
  // available in the input files.  You can also create all of your
  // histograms and trees in here, but be aware that this method
  // doesn't get called if no events are processed.  So any objects
  // you create here won't be available in the output if you have no
  // input events.

  m_event = wk()->xaodEvent();

  // as a check, let's see the number of events in our xAOD
  Info("initialize()", "Number of events = %lli", m_event->getEntries() ); // print long long int

  // count number of events
  m_eventCounter = 0;

  // count number of truth events which pass selection criteria
  m_numTruthEvents = 0;

  // count number of reco events which pass selection criteria
  m_numRecoEvents = 0;

  // count number of good final state photons
  numPhotonsAllPS = 0;
  numPhotonsFiducial = 0;

  // count number of truth particles
  numParticlesAll = 0;
  numParticlesStatus = 0;
  numParticlesBarcode = 0;
  numParticlesFS = 0;

  // count number of Dalitz decays
  numDalitz = 0;
  numNonDalitzHiggs = 0;

  return EL::StatusCode::SUCCESS;
}



EL::StatusCode HgammaTruthAnalysis :: execute ()
{
  // Here you do everything that needs to be done on every single
  // events, e.g. read input variables, apply cuts, and fill
  // histograms and trees.  This is where most of your actual analysis
  // code will go.


  // Count event (remnant from a tutorial long ago)

  if( (m_eventCounter % 100) ==0 ) Info("execute()", "Event number = %i", m_eventCounter );
  m_eventCounter++;

  // Get event information

  const xAOD::EventInfo* eventInfo = 0;
  if(!m_event->retrieve(eventInfo, "EventInfo").isSuccess()){
  	Error("execute()", "Failed to retrieve event info collection. Exiting." );
    return EL::StatusCode::FAILURE;
  }
  m_isMC = eventInfo->eventType(xAOD::EventInfo::IS_SIMULATION);
  m_eventWeight = eventInfo->mcEventWeight(0);


  // Apply truth particle definitions

  if ( m_makeTruthObjects )
  {
      if ( !MakeTruthParticles() ) return EL::StatusCode::SUCCESS;
      PlotKinematics();
  }

  if ( m_studyTruthIso )
  {
      StudyEventTruthIso();
  }

  if ( m_studyConvertedPhotons )
  {
      StudyConvertedPhotons();
  }

  if ( m_studyDalitzDecays )
  {
      StudyDalitzDecays();
  }


  // Plot diphoton Higgs system. Look at mass peak. Also use parent pdgID as loose cross check (but explain that this is not a real check)


  // Eventually get unfolding factor


  // Save the event:
//  m_event->fill();			// Don't need this for now, can probably comment out
  
  return EL::StatusCode::SUCCESS;
}



EL::StatusCode HgammaTruthAnalysis :: postExecute ()
{
  // Here you do everything that needs to be done after the main event
  // processing.  This is typically very rare, particularly in user
  // code.  It is mainly used in implementing the NTupleSvc.
  return EL::StatusCode::SUCCESS;
}



EL::StatusCode HgammaTruthAnalysis :: finalize ()
{
  // This method is the mirror image of initialize(), meaning it gets
  // called after the last event has been processed on the worker node
  // and allows you to finish up any objects you created in
  // initialize() before they are written to disk.  This is actually
  // fairly rare, since this happens separately for each worker node.
  // Most of the time you want to do your post-processing on the
  // submission node after all your histogram outputs have been
  // merged.  This is different from histFinalize() in that it only
  // gets called on worker nodes that processed input events.

  // finalize and close our output xAOD file:
//  TFile *file = wk()->getOutputFile ("STExAOD");
//  m_event->finishWritingTo( file );

  std::cout << "Number of good truth photons found : " << numPhotonsAllPS << std::endl;
  std::cout << "Number of good fiducial truth photons found : " << numPhotonsFiducial << std::endl;

  if ( h_plotTruthPdgIds )
  {
      std::cout << "Mean number of truth particles per event: " << numParticlesAll/(float)m_eventCounter << std::endl;
      std::cout << "Mean number of truth particles which pass status but not barcode: " << numParticlesStatus/(float)m_eventCounter << std::endl;
      std::cout << "Mean number of truth particles which pass barcode but not status: " << numParticlesBarcode/(float)m_eventCounter << std::endl;
      std::cout << "Mean number of truth particles which pass status and barcode: " << numParticlesFS/(float)m_eventCounter << std::endl;
  }

  if ( m_studyDalitzDecays )
  {
      std::cout << "Number of events with Dalitz decaying Higgs: " << numDalitz << std::endl;
      std::cout << "Number of events with non-Dalitz decaying Higgs: " << numNonDalitzHiggs << std::endl;
  }

  return EL::StatusCode::SUCCESS;
}



EL::StatusCode HgammaTruthAnalysis :: histFinalize ()
{
  // This method is the mirror image of histInitialize(), meaning it
  // gets called after the last event has been processed on the worker
  // node and allows you to finish up any objects you created in
  // histInitialize() before they are written to disk.  This is
  // actually fairly rare, since this happens separately for each
  // worker node.  Most of the time you want to do your
  // post-processing on the submission node after all your histogram
  // outputs have been merged.  This is different from finalize() in
  // that it gets called on all worker nodes regardless of whether
  // they processed input events.
  return EL::StatusCode::SUCCESS;
}


