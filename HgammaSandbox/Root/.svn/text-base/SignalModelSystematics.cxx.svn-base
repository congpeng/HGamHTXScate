#include "HgammaSandbox/SignalModelSystematics.h"
#include "HGamAnalysisFramework/HgammaIncludes.h"

// this is needed to distribute the algorithm to the workers
ClassImp(SignalModelSystematics)



SignalModelSystematics::SignalModelSystematics(const char *name)
: HgammaAnalysis(name)
{
  // Here you put any code for the base initialization of variables,
  // e.g. initialize all pointers to 0.  Note that you should only put
  // the most basic initialization here, since this method will be
  // called on both the submission and the worker node.  Most of your
  // initialization code will go into histInitialize() and
  // initialize().
}



SignalModelSystematics::~SignalModelSystematics()
{
  // Here you delete any memory you allocated during your analysis.
}



EL::StatusCode SignalModelSystematics::createOutput()
{
  // Here you setup the histograms needed for you analysis. This method
  // gets called after the Handlers are initialized, so that the systematic
  // registry is already filled.

  // loop over systematic variations and create a histogram for each
  for (auto sys: getSystematics()) {
    Info("createHistograms()", "Creating photon_pt for systematic: %s", sys.name().c_str());

    TString hname = sys.name() == "" ? "m_yy" : TString::Format("m_yy_%s", sys.name().c_str());
    histoStore()->createTH1F(hname, 80, 120, 130);
  }

  return EL::StatusCode::SUCCESS;
}



EL::StatusCode SignalModelSystematics::execute()
{
  // Here you do everything that needs to be done on every single
  // events, e.g. read input variables, apply cuts, and fill
  // histograms and trees.  This is where most of your actual analysis
  // code will go.

  HgammaAnalysis::execute();

  // loop over systematics registered by calibration / selection tools
  for (auto sys: getSystematics()) {
    applySystematicVariation(sys);

    // use HgammaAnalysis::getPhotons() to get calibrated/smeared, pt ordered photons
    xAOD::PhotonContainer photons = photonHandler()->getCorrectedContainer();

    // if 2 or more photons pass selections, build Higgs from two leading
    if (photons.size() > 1) {
      TLorentzVector h = photons[0]->p4() + photons[1]->p4();

      TString hname = sys.name() == "" ? "m_yy" : TString::Format("m_yy_%s", sys.name().c_str());
      histoStore()->fillTH1F(hname, h.M()/HG::GeV);
    }

  }

  return EL::StatusCode::SUCCESS;
}
