#include "HgammaSandbox/TruthAnalysisKehinde.h"
#include "HGamAnalysisFramework/HgammaIncludes.h"
#include "HGamAnalysisFramework/TruthUtils.h"
#include "AthContainers/ConstDataVector.h"

// this is needed to distribute the algorithm to the workers
ClassImp(TruthAnalysisKehinde)



TruthAnalysisKehinde::TruthAnalysisKehinde(const char *name)
: HgammaAnalysis(name)
{
  // Here you put any code for the base initialization of variables,
  // e.g. initialize all pointers to 0.  Note that you should only put
  // the most basic initialization here, since this method will be
  // called on both the submission and the worker node.  Most of your
  // initialization code will go into histInitialize() and
	// initialize().
}
	


TruthAnalysisKehinde::~TruthAnalysisKehinde()
{
  // Here you delete any memory you allocated during your analysis.
}



EL::StatusCode TruthAnalysisKehinde::createOutput()
{
  // Here you setup the histograms needed for you analysis. This method
  // gets called after the Handlers are initialized, so that the systematic
  // registry is already filled.

  //histoStore()->createTH1F("m_yy", 60, 110, 140);
  /* Histogram for number of photons*/
  histoStore()->createTH1F("NHiggsPhotons", 10, 0, 10);
  histoStore()->createTH1F("NallPhotons", 10, 0, 10);
  histoStore()->createTH1F("NPhotons", 10, 0, 10);
  histoStore()->createTH1F("NloosePhoton", 10, 0, 10);
  histoStore()->createTH1F("NtightPhotons", 10, 0, 10);
  histoStore()->createTH1F("NRecophotons", 10, 0, 10);
  histoStore()->createTH1F("NtruePhotons", 10, 0, 10);
  


  histoStore()->createTH1F("invMass_photonFromHiggs",50,100,160);
  histoStore()->createTH1F("invMass_photonFromHiggs_1",50,120,130);
  histoStore()->createTH1F("invMass_photonFromHiggs_2",50,124.9,125.1);
  histoStore()->createTH1F("invMass_photonFromHiggs_3",50,124.99,125.01);
  
  histoStore()->createTH1F("invMass_allPhotons",50,100,160);
  histoStore()->createTH1F("invMass_allPhotons_1",50,110,160);
  histoStore()->createTH1F("invMass_allPhotons_2",50,0,200);


  histoStore()->createTH1F("invMass_truePhotons",50,124.99,125.01);
  histoStore()->createTH1F("invMass_truePhotons_1",50,124.9,125.1);
  histoStore()->createTH1F("invMass_truePhotons_2",50,120,130);
  histoStore()->createTH1F("invMass_photons_1",50,110,160);
  histoStore()->createTH1F("invMass_loosePhotons_1",50,100,160);
  histoStore()->createTH1F("invMass_tightPhotons_1",50,110,150);
  histoStore()->createTH1F("invMass_Recophotons_1",50,110,150);
  return EL::StatusCode::SUCCESS;
}



EL::StatusCode TruthAnalysisKehinde::execute()
{
  // Here you do everything that needs to be done on every single
  // events, e.g. read input variables, apply cuts, and fill
  // histograms and trees.  This is where most of your actual analysis
  // code will go.

  // Important to keep this, so that internal tools / event variables
  // are filled properly.
  HgammaAnalysis::execute();

  //xAOD::PhotonContainer photons = photonHandler()->getCorrectedContainer();
  //if (photons.size() < 2) return EL::StatusCode::SUCCESS;
  //TLorentzVector h = photons[0]->p4() + photons[1]->p4();
  //histoStore()->fillTH1F("m_yy", h.M()/HG::GeV);
  /* Identify Truth Particles*/
  /*Grab the truth particle*/
  const xAOD::TruthParticleContainer *truthPtcls = 0;
  if ( event()->retrieve(truthPtcls, "TruthParticle" ).isFailure() )
    HG::fatal("Cannot access TruthParticle");
    const xAOD::JetContainer *truthJets = 0;
  if (event()->retrieve(truthJets,"AntiKt4TruthJets").isFailure() )
    HG::fatal("Cannot access AntiKt4TruthJets");
      
  /* Find the truth photon */
  std::vector<const xAOD::TruthParticle*> truthPhotons;
  for ( const xAOD::TruthParticle *ptcl : *truthPtcls )
    if ( HG::isGoodTruthPhoton(ptcl) )
      truthPhotons.push_back(ptcl);
      
  HG::TruthParticleStruct truth = HG::identifyTruthParticles(truthPtcls,truthJets);
  // if (truth.Bhadrons.size()||truth.photons.size()!=2)
  // HG::printTruthParticles(truth);  

  /* get truth photon from Higgs*/
  HG::TruthPtcls higgsPhotons = truth.photonsFromHiggs;
  /*get truth photon */
  // HG::TruthPtcls truePhotons = truth.photons;
  
  /*Reconstucted photon*/
  xAOD::PhotonContainer allPhotons = photonHandler()->getCorrectedContainer();
   
  /* Tight and loose photon*/
  xAOD::PhotonContainer loosePhotons(SG::VIEW_ELEMENTS);
  xAOD::PhotonContainer tightPhotons(SG::VIEW_ELEMENTS);
    
  /* selection of Loose and tight photon from allPhoton */
    
  for ( xAOD::Photon *gam : allPhotons )
  {
  // require loose ID - better to use IsEM tool here ?
  if (!gam->passSelection("Loose")) continue;
    loosePhotons.push_back(gam);
 
    // require tight ID - better to use IsEM tool here ?
  if (!gam->passSelection("Tight")) continue;
     tightPhotons.push_back(gam);
  }
 
  /* aApplied Selection to photons*/
  xAOD::PhotonContainer photons = photonHandler()->applySelection(allPhotons);
   
  /*Recontructed photon*/
  xAOD::PhotonContainer Recophotons = photonHandler()->applySelection(tightPhotons);
   


  /* plot the number of photon found*/
  histoStore()->fillTH1F("NtruePhotons",truthPhotons.size());
  histoStore()->fillTH1F("NHiggsPhotons",higgsPhotons.size());
  histoStore()->fillTH1F("NallPhotons",allPhotons.size());
  histoStore()->fillTH1F("NPhotons",photons.size());
  histoStore()->fillTH1F("NloosePhoton",photons.size());
  histoStore()->fillTH1F("NtightPhotons",photons.size());
  histoStore()->fillTH1F("NRecophotons",photons.size());
  

  /* Two truePhotons */
  if (truthPhotons.size()>=2) {
  /*sum their four momumtum*/
    TLorentzVector tt =  truthPhotons[0]->p4() + truthPhotons[1]->p4();
    /*Unit convertion*/
    tt*=HG::invGeV;
    /*Fill Histogram with photon*/
    histoStore()->fillTH1F("invMass_truePhotons",tt.M());
    histoStore()->fillTH1F("invMass_truePhotons_1",tt.M());
    histoStore()->fillTH1F("invMass_truePhotons_2",tt.M());
    //histoStore()->fillTH1F("invMass_truePhotons_3",tt.M());
   }
  /* Two photonFromHiggs */
  if (higgsPhotons.size()>=2) {
  /*sum their four momumtum*/
    TLorentzVector yy =  higgsPhotons[0]->p4() + higgsPhotons[1]->p4();
    /*Unit conversion*/
    yy*=HG::invGeV;
    /*Fill Histogram with photon*/
    histoStore()->fillTH1F("invMass_photonFromHiggs",yy.M());
    histoStore()->fillTH1F("invMass_photonFromHiggs_1",yy.M());
    histoStore()->fillTH1F("invMass_photonFromHiggs_2",yy.M());
    histoStore()->fillTH1F("invMass_photonFromHiggs_3",yy.M());
  }
    
  if (allPhotons.size()>=2){
    TLorentzVector y1 =  allPhotons[0]->p4() + allPhotons[1]->p4();
    y1*=HG::invGeV;
    /*Fill Histogram with photon*/
    histoStore()->fillTH1F("invMass_allPhotons_1",y1.M());
        
  }
      
  if (photons.size()>=2){
    TLorentzVector y2 =  photons[0]->p4() + photons[1]->p4();
    y2*=HG::invGeV;
    /*Fill Histogram with photon*/
    histoStore()->fillTH1F("invMass_photons_1",y2.M());
   }

  if (loosePhotons.size()>=2){
    TLorentzVector y3 =  loosePhotons[0]->p4() + loosePhotons[1]->p4();
    y3*=HG::invGeV;
    /*Fill Histogram with photon*/
    histoStore()->fillTH1F("invMass_loosePhotons_1",y3.M());
  }
      
  if (tightPhotons.size()>=2){
    TLorentzVector y4 =  tightPhotons[0]->p4() + tightPhotons[1]->p4();
    y4*=HG::invGeV;
    /*Fill Histogram with photon*/
    histoStore()->fillTH1F("invMass_tightPhotons_1",y4.M());
  }
      
  if (Recophotons.size()>=2){
    TLorentzVector y5 =  Recophotons[0]->p4() + Recophotons[1]->p4();
    y5*=HG::invGeV;
    /*Fill Histogram with photon*/
    histoStore()->fillTH1F("invMass_Recophotons_1",y5.M());
  }
  
  return EL::StatusCode::SUCCESS;
} 
