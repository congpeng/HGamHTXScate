#ifndef HgammaSandbox_PlotUtils_H
#define HgammaSandbox_PlotUtils_H

#include "HGamAnalysisFramework/HgammaIncludes.h"
#include <TGraphAsymmErrors.h>
#include <TCanvas.h>
#include <TLatex.h>
#include <TH1F.h>

// \brief Hgamma namespace
namespace HG {
  
  //! \name Helper methods for opening and accessing histograms/graphs
  //!       in root files
  //! \author Dag Gillberg
  //@{
  TFile *openFile(TString fn) {
    TFile *f = TFile::Open(fn);
    if (f==nullptr) fatal("Cannot open "+fn);
    return f;
  }
  
  TH1 *getHisto(TFile *f, TString hn) {
    TH1 *h = (TH1*)f->Get(hn);
    if (h==nullptr) fatal("Cannot access histo "+hn+" in file "+f->GetName());
    return h;
  }
  
  TH2 *getHisto2D(TFile *f, TString hn) {
    TH2 *h = (TH2*)f->Get(hn);
    if (h==nullptr) fatal("Cannot access 2D histo "+hn+" in file "+f->GetName());
    return h;
  }
  //@}

  //! \name Helper methods for formatting and drawing histograms
  //! \author Dag Gillberg
  //@{
  void formatHisto(TH1 *h, int col=kBlue, int lw=2) {
    h->SetLineColor(col); h->SetLineWidth(lw); h->SetStats(0);
  }
  
  TH1 *drawHisto(TH1 *h, TString opt, int col=kBlue, int lw=2) {
    formatHisto(h,col,lw); h->Draw(opt); return h;
  }
  
  TH1 *drawHisto(TFile *f, TString hn, TString opt, int col=kBlue, int lw=2) {
    return drawHisto(getHisto(f,hn),opt,col,lw);
  }
  
  TH1 *drawHistoNorm(TH1 *h, TString opt, int col=kBlue, int lw=2) {
    formatHisto(h,col,lw); h->SetMaximum( h->GetMaximum() * 1.2 );
    h->GetYaxis()->SetTitle("Fraction"); h->DrawNormalized(opt); return h;
  }
  TH1 *drawHistoNorm(TFile *f, TString hn, TString opt, int col=kBlue, int lw=2) {
    return drawHistoNorm(getHisto(f,hn),opt,col,lw);
  }
  
  TH2 *drawHisto2D(TH2 *h, TString opt="colz") { h->SetStats(0); h->Draw(opt); return h; }
  TH2 *drawHisto2D(TFile *f, TString hn, TString opt) { return drawHisto2D(getHisto2D(f,hn),opt); }
  //@}

  //! \name Helper methods for printing text on the plots
  //! \author Dag Gillberg
  //! \author Karishma Sehkon
  //! \author Jared Vasquez
  //@{
  void drawText(double x, double y, TString txt, int col=kBlack, double tsize=0.036) {
    static TLatex *tex = new TLatex(); tex->SetNDC();
    tex->SetTextFont(42); tex->SetTextSize(tsize); tex->SetTextColor(col);
    tex->DrawLatex(x,y,txt);
  }
  void drawTextSmall(double x, double y, TString txt, int col=kBlack) {
    drawText(x,y,txt,col,0.028);
  }
  //@}

  void drawBayesianEff(TH1 *pass, TH1 *total, int col, int ms=21) {
    TGraphAsymmErrors *g = new TGraphAsymmErrors(pass,total);
    g->SetLineColor(col); g->SetMarkerColor(col); g->SetMarkerStyle(ms); g->SetMarkerSize(0.8);
    g->Draw("P same");
  }
  
}

#endif
